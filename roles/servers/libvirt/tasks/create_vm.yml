---
- name: Set vars
  set_fact:
    vm_config_path: "{{ libvirt_images_dir }}/{{ vm.name }}.xml"
    vm_disk_path: "{{ libvirt_images_dir }}/{{ vm.name }}.qcow2"
    vm_cloud_init_path: "{{ cloud_init_iso_dir }}/{{ vm.name }}.iso"

- name: "Create directory for cloud-init configs"
  file:
    path: "{{ cloud_init_src_dir }}/{{ vm.name }}"
    state: directory
    owner: qemu
    group: qemu

- name: Render vm config
  template:
    src: vm.xml.j2
    dest: "{{ vm_config_path }}"
    owner: qemu
    group: qemu
    mode: 0600
  register: vm_config

- name: Create cloud-init config
  template:
    src: "{{ item.src }}"
    dest: "{{ cloud_init_src_dir }}/{{ vm.name }}/{{ item.dest }}"
  loop: "{{ cloud_init_config_files }}"
  when:
    - vm_config.changed

- name: Create CD-ROM ISO with cloud-init config
  shell: |
    genisoimage -output {{ vm_cloud_init_path }} \
      -volid cidata \
      -joliet \
      -r {% for item in cloud_init_config_files %} {{ cloud_init_src_dir }}/{{ vm.name }}/{{ item.dest }} {% endfor %} &>> "{{ cloud_init_src_dir }}/{{ vm.name }}/logs"
  when:
    - vm_config.changed

- name: Destroy the domain with XML specification
  virt:
    name: "{{ vm.name }}"
    command: destroy
  ignore_errors: true
  when: vm_recreation == true

- name: Remove storage
  file:
    path: "{{ vm_disk_path }}"
    state: absent
  when: vm_recreation == true

- name: Undefine the domain with XML specification
  virt:
    name: "{{ vm.name }}"
    command: undefine
  ignore_errors: true
  when: vm_recreation == true

- name: Check if storage exists
  stat:
    path: "{{ vm_disk_path }}"
  register: qcow_check

- name: Clone template storage
  copy:
    remote_src: true
    src: "{{ libvirt_images_dir }}/{{ cloud_image_name }}"
    dest: "{{ vm_disk_path }}"
    owner: qemu
    group: qemu
    mode: 0600
  when: vm_recreation == true or qcow_check.stat.exists == false

# - name: Extend disk image
#   shell: |
#     virsh --connect qemu:///system vol-resize "{{ images_dir }}/{{ instance_id }}.qcow2" "{{ vm.disk_size }}"
#     /sbin/xfs_growfs "{{ images_dir }}/{{ vm.name }}.qcow2"

- name: Shutdown if config changed and already running
  virt:
    name: "{{ vm.name }}"
    state: shutdown
  when:
    - vm_config.changed
    - vm_recreation == false

- name: Wait for shutdown of the VM
  shell: virsh list | grep -w "{{ vm.name }}"
  register: shutdown_res
  ignore_errors: true
  retries: 10
  until: shutdown_res.rc == 1
  when:
    - vm_config.changed
    - vm_recreation == false

- name: Define the domain with XML specification
  virt:
    name: "{{ vm.name }}"
    command: undefine
  when:
    - vm_config.changed

- name: Wait for removal of the VM
  shell: virsh list --all | grep -w "{{ vm.name }}"
  ignore_errors: true
  register: undefine_res
  retries: 10
  until: undefine_res.rc == 1
  when:
    - vm_config.changed

- name: Define the domain with XML specification
  virt:
    command: define
    xml: "{{ lookup('template', 'vm.xml.j2') }}"
  register: vm_config

- name: Start the vm after definition
  virt:
    name: "{{ vm.name }}"
    state: running
    autostart: yes
