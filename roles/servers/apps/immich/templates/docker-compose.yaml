#
# WARNING: To install Immich, follow our guide: https://immich.app/docs/install/docker-compose
#
# Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.
---
name: immich

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
                - compute
                - video
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release-cuda}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
    volumes:
      - ./model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:5b8f8c333bef895c925f56629d6ba90aea95a4f7391f62411e625267c600b19c
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:32324a2f41df5de9efe1af166b7008c3f55646f8d0e00d9550c16c9822366b4a
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      # DB_STORAGE_TYPE: 'HDD'
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    shm_size: 128mb
    restart: always

# volumes:
#   model-cache:

#########################
# services:
  # armnn:
  #   devices:
  #     - /dev/mali0:/dev/mali0
  #   volumes:
  #     - /lib/firmware/mali_csffw.bin:/lib/firmware/mali_csffw.bin:ro # Mali firmware for your chipset (not always required depending on the driver)
  #     - /usr/lib/libmali.so:/usr/lib/libmali.so:ro # Mali driver for your chipset (always required)

  # rknn:
  #   security_opt:
  #     - systempaths=unconfined
  #     - apparmor=unconfined
  #   devices:
  #     - /dev/dri:/dev/dri

  # cpu: {}


  # rocm:
  #   group_add:
  #     - video
  #   devices:
  #     - /dev/dri:/dev/dri
  #     - /dev/kfd:/dev/kfd

  # openvino:
  #   device_cgroup_rules:
  #     - 'c 189:* rmw'
  #   devices:
  #     - /dev/dri:/dev/dri
  #   volumes:
  #     - /dev/bus/usb:/dev/bus/usb

  # openvino-wsl:
  #   devices:
  #     - /dev/dri:/dev/dri
  #     - /dev/dxg:/dev/dxg
  #   volumes:
  #     - /dev/bus/usb:/dev/bus/usb
  #     - /usr/lib/wsl:/usr/lib/wsl


####################
# services:
#   cpu: {}

#   nvenc:
#     deploy:
#       resources:
#         reservations:
#           devices:
#             - driver: nvidia
#               count: 1
#               capabilities:
#                 - gpu
#                 - compute
#                 - video

  # quicksync:
  #   devices:
  #     - /dev/dri:/dev/dri

  # rkmpp:
  #   security_opt: # enables full access to /sys and /proc, still far better than privileged: true
  #     - systempaths=unconfined
  #     - apparmor=unconfined
  #   group_add:
  #     - video
  #   devices:
  #     - /dev/rga:/dev/rga
  #     - /dev/dri:/dev/dri
  #     - /dev/dma_heap:/dev/dma_heap
  #     - /dev/mpp_service:/dev/mpp_service
  #     #- /dev/mali0:/dev/mali0 # only required to enable OpenCL-accelerated HDR -> SDR tonemapping
  #   volumes:
  #     #- /etc/OpenCL:/etc/OpenCL:ro # only required to enable OpenCL-accelerated HDR -> SDR tonemapping
  #     #- /usr/lib/aarch64-linux-gnu/libmali.so.1:/usr/lib/aarch64-linux-gnu/libmali.so.1:ro # only required to enable OpenCL-accelerated HDR -> SDR tonemapping

  # vaapi:
  #   devices:
  #     - /dev/dri:/dev/dri

  # vaapi-wsl: # use this for VAAPI if you're running Immich in WSL2
  #   devices:
  #     - /dev/dri:/dev/dri
  #     - /dev/dxg:/dev/dxg
  #   volumes:
  #     - /usr/lib/wsl:/usr/lib/wsl
  #   environment:
  #     - LIBVA_DRIVER_NAME=d3d12
