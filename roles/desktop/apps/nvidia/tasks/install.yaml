---
# curl -L https://developer.download.nvidia.com/compute/cuda/repos/fedora41/x86_64/cuda-fedora41.repo -o /etc/yum.repos.d/cuda-fedora41.repo
# - name: Import a key from a url
#   ansible.builtin.rpm_key:
#     state: present
#     key: https://developer.download.nvidia.com/compute/cuda/repos/fedora41/x86_64/D42D0685.pub

# - name: Setup cuda-fedora yum repo
#   ansible.builtin.copy:
#     src: cuda-fedora41.repo
#     dest: /etc/yum.repos.d/cuda-fedora41.repo
#     owner: "root"
#     group: "root"
#     mode: "0600"

# https://developer.download.nvidia.com/compute/cuda/12.8.1/local_installers/cuda_12.8.1_570.124.06_linux.run
# https://www.if-not-true-then-false.com/2015/fedora-nvidia-guide/

# dnf install @base-x kernel-devel kernel-headers gcc make dkms acpid libglvnd-glx libglvnd-opengl libglvnd-devel pkgconfig xorg-x11-server-Xwayland libxcb egl-wayland kernel-devel-matched vdpauinfo libva-vdpau-driver libva-utils

# echo "options nvidia NVreg_PreserveVideoMemoryAllocations=1" >> /etc/modprobe.d/nvidia.conf
# echo "options nvidia-drm modeset=1 fbdev=1" >> /etc/modprobe.d/nvidia.conf

# vi /etc/modprobe.d/nvidia-installer-disable-nouveau.conf
# generated by nvidia-installer
# blacklist nouveau
# options nouveau modeset=0
# blacklist nova_core

# bash cuda_12.9.1_575.57.08_linux.run --silent --toolkit --override
# bash NVIDIA-Linux-x86_64-575.64.05.run --silent --dkms --accept-license --disable-nouveau --no-nouveau-check --rebuild-initramfs --run-nvidia-xconfig

# dracut -f

# curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo
# dnf install -y nvidia-container-toolkit
# nvidia-ctk runtime configure --runtime=docker

# curl -sL https://developer.nvidia.com/cuda-downloads | grep -oP 'href=\\?&quot;\K[^&]+(?=\\&quot;)' | grep -i linux.run | head -n1
# curl -sL https://www.nvidia.com/en-us/drivers/unix/ | grep -i feature | grep -i x86 | grep Linux | sed -n 's/.*Latest New Feature Branch Version:<\/span><a href="[^"]\+"> *\([^< ]\+\).*/\1/p'

# export CC="gcc -std=gnu17"

- name: Install nvidia pkgs
  ansible.builtin.dnf:
    name: "{{ pkgs }}"
    state: present
  vars:
    pkgs:
      - nvidia-container-toolkit
      # - cuda-toolkit-12-8
      # - nvidia-open

    # - name: Download latest CUDA Toolkit runfile
    #   get_url:
    #     url: "{{ cuda_runfile_url }}"
    #     dest: "/tmp/{{ cuda_runfile_name }}"
    #     mode: '0755'
    #     force: yes

    # - name: Run CUDA Toolkit installer (toolkit only, silent)
    #   shell: "/tmp/{{ cuda_runfile_name }} --silent --toolkit"
    #   args:
    #     creates: "/usr/local/cuda-{{ cuda_version }}"

    # - name: Ensure /usr/local/cuda symlink points to latest version
    #   file:
    #     src: "/usr/local/cuda-{{ cuda_version }}"
    #     dest: "/usr/local/cuda"
    #     state: link
    #     force: yes

    # - name: Run NVIDIA driver installer silently
    #   shell: |
    #     sh "{{ nvidia_driver_runfile }}" --silent --dkms --accept-license --disable-nouveau --no-nouveau-check --rebuild-initramfs --run-nvidia-xconfig
    #   args:
    #     creates: "/usr/bin/nvidia-smi"

#  --uninstall
# --allow-installation-with-running-driver

# - name: Switch to multi-user.target (runlevel 3, stop GUI)
#   become: yes
#   shell: |
#     systemctl isolate multi-user.target
#   when: ansible_facts['env']['XDG_SESSION_TYPE'] is defined and ansible_facts['env']['XDG_SESSION_TYPE'] == 'x11'
#   ignore_errors: yes
