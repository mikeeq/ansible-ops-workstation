---
- name: Remove all system-wide errors in pip
  shell: rm -rfv /usr/lib/*/EXTERNALLY-MANAGED
  register: pip_ext_managed
  changed_when: pip_ext_managed.stdout != ""

- name: Install PIP pkgs
  pip:
    name: "{{ pip_pkgs_deps }}"
    state: present
  vars:
    pip_pkgs_deps:
      - virtualenv

- name: Install pipx
  package:
    name: pipx
    state: present
  when:
    - ansible_distribution == "Fedora"


- name: Install PIP Apps globally
  pip:
    name: "{{ item.name }}"
    state: present
  with_items:
    - "{{ pip_apps }}"
  when: not item.virtualenv_enabled

# - name: Uninstall PIP Apps in virtualenv
#   pip:
#     name: "{{ item.name }}"
#     state: absent
#     virtualenv: "{{ virtualenv_install_path }}/{{ item.name }}"
#   with_items:
#     - "{{ pip_apps }}"
#   when: item.virtualenv_enabled

- name: Install PIP Apps in virtualenv
  pip:
    name: "{{ item.name }}"
    state: present
    virtualenv: "{{ virtualenv_install_path }}/{{ item.name }}"
    virtualenv_python: "{{ item.virtualenv_python | default(omit) }}"
  with_items:
    - "{{ pip_apps }}"
  when: item.virtualenv_enabled

- name: Install PIPx Apps globally
  community.general.pipx:
    name: "{{ item.name }}"
    state: install
    install_deps: true
    global: true
    python: "{{ item.python_version | default(omit) }}"
    # force: true
  with_items:
    - "{{ pipx_apps }}"

- name: Install PIPx injected apps globally
  community.general.pipx:
    name: "{{ item.name }}"
    state: inject
    install_deps: true
    global: true
    python: "{{ item.python_version | default(omit) }}"
    install_apps: true
    inject_packages: "{{ item.inject_packages | default(omit) }}"
    # force: true
  when: item.inject_packages is defined
  with_items:
    - "{{ pipx_apps }}"

- name: Create a symbolic link
  file:
    src: "{{ virtualenv_install_path }}/{{ item.name }}/bin/{{ item.name }}"
    dest: "/usr/local/bin/{{ item.name }}"
    owner: root
    group: root
    state: link
    force: true
  with_items:
    - "{{ pip_apps }}"
  when: item.virtualenv_enabled and not item.name == "azure-cli"

- name: Create a symbolic link for azure-cli
  file:
    src: "{{ virtualenv_install_path }}/{{ item.name }}/bin/az"
    dest: "/usr/local/bin/az"
    owner: root
    group: root
    state: link
  with_items:
    - "{{ pip_apps }}"
  when: item.virtualenv_enabled and item.name == "azure-cli"

- import_tasks: update.yml
  tags:
    - update
